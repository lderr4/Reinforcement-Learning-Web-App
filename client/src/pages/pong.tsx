import { type NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from 'react'
import useWebSocket, { ReadyState } from "react-use-websocket";

const WS_URL = 'ws://127.0.0.1:8000';

function isUserStatus(message) {
    let evt = JSON.parse(message.data);
    return evt.type === "userstatus";
}

function isGuess(message) {
    let evt = JSON.parse(message.data);
    return evt.type === "userguess";
}


const Pong: NextPage = () => {

    const [count, setCount] = useState(0)
    const [username, setUsername] = useState('');
    const { sendJsonMessage, readyState } = useWebSocket(WS_URL, {
        onOpen: () => {
            console.log(`WebSocket connection established.`);
        },
        share: true,
        filter: () => false,
        retryOnError: true,
        shouldReconnect: () => true
    });
    const [guess, setGuess] = useState('');
    let allGuesses = Object.values(lastJsonMessage?.data.editorContent || []);

    useEffect(() => {
        if (readyState === ReadyState.OPEN) {
            sendJsonMessage({
                username,
                type: "userstatus"
            });
        }
    }, [sendJsonMessage, readyState]);


    function handleGuess(e) {
        e.preventDefault;
        sendJsonMessage({
            type: "userguess",
            content: guess
        });
        console.log("guess sent");
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
                <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
                    <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Rocky <span className="text-[hsl(280,100%,70%)]">AI</span>
                    </h1>
                    <div className='border border-gray-100 row-span-4'>
                        <div className="">
                            <label>
                                Guess:
                                <input type="text" name="username" onInput={(e) => {
                                    e.preventDefault;
                                    setGuess(e.target.value);
                                }} className="text-black" />
                            </label>
                            <button type="button" onClick={(e) => handleGuess(e.target.value)}
                                className="">Guess
                            </button>
                        </div>
                        <ul>
                            {allGuesses.map(g => (<li>{g}</li>))}
                        </ul>
                    </div>
                </div>
            </main>
        </>
    );
};

export default Pong;

function Document() {
    const [guess, setGuess] = useState('');
    const { lastJsonMessage, sendJsonMessage } = useWebSocket(WS_URL, {
        share: true,
    });
    let allGuesses = Object.values(lastJsonMessage?.data.editorContent || []);

    function handleGuess(e) {
        e.preventDefault;
        sendJsonMessage({
            type: "userguess",
            content: guess
        });
        console.log("guess sent");
    }

    return (
        <div className='border border-gray-100 row-span-4'>
            <div className="">
                <label>
                    Guess:
                    <input type="text" name="username" onInput={(e) => {
                        e.preventDefault;
                        setGuess(e.target.value);
                    }} className="text-black" />
                </label>
                <button type="button" onClick={(e) => handleGuess(e.target.value)}
                    className="">Guess
                </button>
            </div>
            <ul>
                {allGuesses.map(g => (<li>{g}</li>))}
            </ul>
        </div>
    );
}
